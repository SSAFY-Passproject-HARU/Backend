<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.haru.model.mapper.RoomMapper">
	
	<resultMap type="RoomImageDto" id="roomImageInfo">
		<result column="image_id" property="imageId"/>
		<result column="room_id" property="roomId"/>
		<result column="image_url" property="imageUrl"/>
	</resultMap>
	
    <!-- 매핑된 컬럼에 새 필드 추가 -->
    <resultMap type="RoomDto" id="roomInfo">
        <result column="room_id" property="roomId"/>
        <result column="user_id" property="userId"/>
        <result column="title" property="title"/>
        <result column="description" property="description"/>
        <result column="price" property="price"/>
        <result column="apt_seq" property="aptSeq"/>
        <result column="favorite" property="favorite"/>
        <result column="area" property="area"/> <!-- 새 필드 추가 -->
        <result column="room_count" property="roomCount"/> <!-- 새 필드 추가 -->
        <result column="bathroom_count" property="bathroomCount"/> <!-- 새 필드 추가 -->
        <result column="room_type" property="roomType"/> <!-- 새 필드 추가 -->
        <result column="room_floor" property="roomFloor"/> <!-- 새 필드 추가 -->
        <result column="total_floors" property="totalFloors"/> <!-- 새 필드 추가 -->
    </resultMap>

    <!-- 매물 정보 추가 -->
    <insert id="insertRoom" useGeneratedKeys="true" keyProperty="roomId" parameterType="com.ssafy.haru.model.RoomDto">
        INSERT INTO roominfos (user_id, title, description, price, apt_seq, favorite, area, room_count, bathroom_count, room_type, room_floor, total_floors)
        VALUES (#{userId}, #{title}, #{description}, #{price}, #{aptSeq}, #{favorite}, #{area}, #{roomCount}, #{bathroomCount}, #{roomType}, #{roomFloor}, #{totalFloors})
    </insert>

    <!-- 매물 이미지 정보 추가 -->
    <insert id="insertRoomImages" parameterType="list">
        INSERT INTO roomimages (room_id, image_url)
        VALUES
        <foreach collection="list" item="image" separator=",">
            (#{image.roomId}, #{image.imageUrl})
        </foreach>
    </insert>


    <!-- 매물 목록 조회 -->
    <select id="findRooms" parameterType="map" resultMap="roomInfo">
		SELECT roominfos.*
		FROM roominfos
		WHERE roominfos.apt_seq IN (
		  SELECT houseinfos.apt_seq
		  FROM houseinfos
		  WHERE CONCAT(houseinfos.sgg_cd, houseinfos.umd_cd) = (
		    SELECT dongcodes.dong_code
		    FROM dongcodes
		    WHERE dongcodes.sido_name = #{sido}
		      AND dongcodes.gugun_name = #{gugun}
		      AND dongcodes.dong_name = #{dong}
		  )
		)
        ORDER BY room_id DESC
    </select>

    <!-- 매물 상세 정보 -->
    <select id="selectByRoomId" parameterType="int" resultMap="roomInfo">
        select * from roominfos
        where room_id = #{roomId}
    </select>
    
    <!-- 아파트 번호로 아마트 이름 조회하기 -->
    <select id="findAptNameByAptSeq" resultType="String">
    SELECT apt_nm
    FROM houseinfos
    WHERE apt_seq = #{aptSeq}
	</select>

	<!-- 매물 이미지 URL 리스트 조회 -->
    <select id="selectRoomImagesByRoomId" parameterType="int" resultMap="roomImageInfo">
        SELECT image_id, room_id, image_url
        FROM roomimages
        WHERE room_id = #{roomId}
    </select>
	
	<!-- 매물 좋아요 누르기 -->
	<insert id="likeRoom" parameterType="com.ssafy.haru.model.RoomFavoriteDto">
		INSERT INTO roomfavorites (user_id, room_id)
		VALUES (#{userId}, #{roomId})
	</insert>
	
	<!-- 유저 아이디와 방 아이디로 좋아요 삭제 -->
	<delete id="deleteFavoriteRoom" parameterType="com.ssafy.haru.model.RoomFavoriteDto">
	    DELETE FROM roomfavorites
	    WHERE user_id = #{userId}
	    AND room_id = #{roomId}
	</delete>
	
	<!-- aptSeq로 매물 리스트 조회 -->
    <select id="selectRoomsByAptSeq" parameterType="String" resultMap="roomInfo">
        SELECT *
        FROM roominfos
        WHERE apt_seq = #{aptSeq}
    </select>
    
    <!-- 유저가 찜한 매물의 평균 속성 계산 -->
    <select id="findUserPreferences" parameterType="String" resultType="com.ssafy.haru.model.request.RecommendRoomRequestDto">
		SELECT 
		    AVG(r.price) AS avgPrice,
		    AVG(r.area) AS avgArea,
		    AVG(r.room_count) AS avgRoomCount,
		    AVG(r.bathroom_count) AS avgBathroomCount,
		    AVG(r.room_floor) AS avgRoomFloor,
		    (
		        SELECT r2.room_type
		        FROM roominfos r2
		        WHERE r2.room_id IN (
		            SELECT rf.room_id
		            FROM roomfavorites rf
		            WHERE rf.user_id = #{userId}
		        )
		        GROUP BY r2.room_type
		        ORDER BY COUNT(r2.room_type) DESC
		        LIMIT 1
		    ) AS preferredRoomType,
		    u.user_sido AS sido,      
		    u.user_gugun AS gugun,    
		    u.user_dong AS dong       
		FROM roominfos r
		JOIN users u ON u.user_id = #{userId}  -- users 테이블과 연결
		WHERE r.room_id IN (
		    SELECT rf.room_id
		    FROM roomfavorites rf
		    WHERE rf.user_id = #{userId}
		)

    </select>
    
    <!-- 유저 선호 평균과 가장 가까운 매물 조회 -->
    <select id="findRecommendedRoomsByDistance" parameterType="com.ssafy.haru.model.request.RecommendRoomRequestDto" resultType="com.ssafy.haru.model.response.RecommendRoomResponseDto">
        SELECT 
            r.room_id AS roomId,
            r.price,
            r.apt_seq AS aptSeq,
            r.area,
            r.room_count AS roomCount,
            r.bathroom_count AS bathroomCount,
            r.room_type AS roomType,
            r.room_floor AS roomFloor,
            r.total_floors AS totalFloors,
            <!-- 유클리드 거리 계산법 -->
            SQRT(
                POW((r.price - #{avgPrice}) / 1000000, 2) +
                POW((r.area - #{avgArea}) * 20, 2) +
                POW((r.room_count - #{avgRoomCount}) * 100, 2) +
                POW((r.bathroom_count - #{avgBathroomCount}) * 100, 2) +
                POW((r.room_floor - #{avgRoomFloor}) * 25, 2)
            ) AS distance
        FROM roominfos r
        WHERE r.apt_seq IN (
        	SELECT h.apt_seq
        	FROM houseinfos h
        	WHERE CONCAT(h.sgg_cd, h.umd_cd) = (
            	SELECT d.dong_code
            	FROM dongcodes d
            	WHERE d.sido_name = #{sido}
              	AND d.gugun_name = #{gugun}
              	AND d.dong_name = #{dong}
        	)
    	)
		
        <!-- preferredRoomType이 일치하는 매물만 선택 -->
        AND r.room_type = #{preferredRoomType}
        ORDER BY distance ASC
    </select>

    <!-- 유저 아이디로 좋아요 목록 반환 -->
	  <select id="selectFavoriteRoomsByUserId" parameterType="String" resultMap="roomInfo">
	      SELECT r.*
	      FROM roomfavorites rf
	      JOIN roominfos r ON rf.room_id = r.room_id
	      WHERE rf.user_id = #{userId}
	  </select>

</mapper>
